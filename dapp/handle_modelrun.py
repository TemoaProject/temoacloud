from django.conf import settings
import collections
from thirdparty.temoa.temoa_model import temoa_model
import uuid, os


# from thirdparty.temoa.temoa_model import temoa_model

def create_config(values):
    """
      # Input File (Mandatory). Usage: --input=<your_path_to_input_file>
    # Input can be a .db or .dat file
    # Both relative path and absolute path are accepted
    --input=/home/yash/Projects/sam/dapp/thirdparty/temoa/db_io/temoa_utopia.sqlite

    # Output File (Mandatory). Usage: --output=<your_path_to_output_file>
    # The output file must be a existing .db file
    --output=/home/yash/Projects/sam/dapp/thirdparty/temoa/db_io/temoa_utopia.sqlite

    # Actions Name (Mandatory). Usage: --scenario=<your_scenario_name>
    # This scenario name is used to store results within the output .db file
    --scenario=test_run

    # Spreadsheet Output (Optional). Usage: --saveEXCEL
    # Direct model output to a spreadsheet
    # Actions name specified above is used to name the spreadsheet
    --saveEXCEL

    # Miscellaneous (Optional)
    # --how_to_cite                    # Optional, display citation info and terminate program
    # --version                        # Optional, display version info and terminate program
    # --fix_variables=fix              # Optional, path to file containing variables to fix

    # Solver-related arguments (Optional)
    --solver=glpk                    # Optional, indicate the solver
    --generate_solver_lp_file        # Optional, generate solver-compatible LP file
    --keep_pyomo_lp_file             # Optional, generate Pyomo-compatible LP file

    # Modeling-to-Generate Alternatives (Optional)
    # Run name will be automatically generated by appending '_mga_' and iteration number to scenario name
    #--mga {
    #	slack=0.1                     # Objective function slack value in MGA runs
    #	iteration=4                   # Number of MGA iterations
    #        weight=integer                # MGA objective function weighting method, currently "integer" or "normalized"
    #}
      """

    # values is all avaiable options

    # print values

    filename = settings.CONFIG_TEMP + "/config_%s" % (uuid.uuid4())

    with open(filename, 'a') as config_file:
        for key, value in values.items():
            if value:
                config_file.write(key + '=' + value + '\n')
            else:
                config_file.write(key + '\n')

    return filename


def extractFlags(values, flags):
    if not flags:
        return

    splitted_flags = flags.split(",")
    for flag in splitted_flags:
        val = flag.split("=")
        if len(val) == 2:
            values["--{0}".format(val[0])] = val[1]
        else:
            values["--{0}".format(val[0])] = ""


def run_model(request, scenario, input_data_file, output_data_file):
    # print ( "this is a very %s" % ("someman")
    # "long string too"
    # "for sure ..."
    # )

    # need to create config with form post data
    if request.method == 'POST':

        values = collections.OrderedDict()

        inputfilename = input_data_file.name
        #values['--input'] = settings.UPLOADED_PROJECTS_DIR + inputfilename
        values['--input'] = input_data_file.file.name
        output_filename = output_data_file.name
        if output_filename != '0':
            #values['--output'] = settings.UPLOADED_PROJECTS_DIR + output_filename
            values['--output'] = input_data_file.file.name
        values["--scenario"] = scenario

        if request.POST.get("chkneosserver", ""):
            values["--neos"] = ""

        values["--solver"] = request.POST.get("solver", "")
        values["--path_to_db_io"] = settings.RESULT_DIR + "db_io"
        values["--path_to_logs"] = settings.RESULT_DIR + "debug_logs"

        runoption = request.POST.get("runoption", "")

        extractFlags(values, request.POST.get("custom_flags", ""))

        print("values", values)

        if runoption == "Uncertainty-Analysis":
            values["--mga"] = "{" + \
                              "\n  slack=" + request.POST.get("MGASlackValue", "") + \
                              "\n  iteration=" + request.POST.get("NumberofMGAIterations", "") + \
                              "\n  weight=" + request.POST.get("MGAWeightingMethod", "") + \
                              "\n}"

        if request.POST.get("createspreadsheetoption", ""):
            values['--saveEXCEL'] = ""

        # OPTION is missing
        if request.POST.get("createtextfileoption", ""):
            values['--saveTEXTFILE'] = ""
        #  values['--generate_solver_text_file'] = ""

        if request.POST.get("generatelpfileoption", ""):
            values["--keep_pyomo_lp_file"] = ""

        filename = create_config(values)

        # yield "About to call runmodel UI\n"
        for k in temoa_model.runModelUI(filename):
            # yield "<div>"+k+"</div>"
            yield k
            # yield " " * 1024

        # Remove this temp config file

        # uncomment below on production
        # os.remove(filename)

        # print "DATA"
        generatedfolderpath = settings.RESULT_DIR + "db_io/" + os.path.splitext(inputfilename)[0] + "_" + values[
            "--scenario"] + "_model"

        print(generatedfolderpath)
        print(runoption)
        yield "runmodelUI finished<br/>"

        # return generatedfolderpath
        # return generatedfolderpath
